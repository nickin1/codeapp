// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ExecutionLog {
  id          String   @id @default(cuid())
  code        String
  language    String
  ipAddress   String
  country     String   @default("Unknown")
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  memoryUsage Float? // in MB
  cpuUsage    Float? // percentage
  execTime    Float? // in seconds
}

model User {
  id            String    @id @default(cuid())
  name          String? // Required for NextAuth
  email         String?   @unique
  emailVerified DateTime?
  github_url    String?
  image         String? // Required for NextAuth
  isActivated   Boolean   @default(false)
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  last_login    DateTime?

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  templates       CodeTemplate[]
  blogPosts       BlogPost[]
  comments        Comment[]
  blogPostReports BlogPostReport[]
  commentReports  CommentReport[]
  votes           UserVote[]
  ExecutionLog    ExecutionLog[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CodeTemplate {
  id          String     @id @default(cuid())
  title       String
  description String?
  code        String
  language    String
  tags        String
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  blogPosts   BlogPost[]
  forked      Boolean    @default(false)
}

model BlogPost {
  id        String           @id @default(cuid())
  title     String
  content   String
  authorId  String
  author    User             @relation(fields: [authorId], references: [id])
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  tags      String
  hidden    Boolean          @default(false)
  comments  Comment[] // Will cascade delete
  votes     UserVote[] // Will cascade delete
  reports   BlogPostReport[] // Will cascade delete
  templates CodeTemplate[] // Many-to-many relationship, won't cascade delete
}

model UserVote {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  blogPostId String?
  blogPost   BlogPost? @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  commentId  String?
  comment    Comment?  @relation(fields: [commentId], references: [id])
  type       Int // 1 for UPVOTE, -1 for DOWNVOTE
}

model Comment {
  id         String          @id @default(cuid())
  content    String
  authorId   String
  author     User            @relation(fields: [authorId], references: [id])
  blogPostId String
  blogPost   BlogPost        @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  reports    CommentReport[]
  parent     Comment?        @relation("commentToComment", fields: [parentId], references: [id])
  parentId   String?
  children   Comment[]       @relation("commentToComment")
  votes      UserVote[]
  hidden     Boolean         @default(false)
}

model BlogPostReport {
  id                    String    @id @default(cuid())
  reason                String
  additionalExplanation String
  reporterId            String
  reporter              User      @relation(fields: [reporterId], references: [id])
  blogPostId            String?
  blogPost              BlogPost? @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  createdAt             DateTime  @default(now())
}

model CommentReport {
  id                    String   @id @default(cuid())
  reason                String
  additionalExplanation String
  reporterId            String
  reporter              User     @relation(fields: [reporterId], references: [id])
  commentId             String?
  comment               Comment? @relation(fields: [commentId], references: [id])
  createdAt             DateTime @default(now())
}
